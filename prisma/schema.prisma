// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    mobileNumber  String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    PlacementEvent2UserNotify PlacementEvent2UserNotify[]
    @@unique([id, name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id       String @id @default(cuid())
    name     String
    userID   String
    postBody String
    User     User   @relation(fields: [userID, name], references: [id, name], onDelete: Cascade)
}

model PlacementEvent {
    id                        String                      @id @default(cuid())
    companyName               String
    deadlineOfRegistration    DateTime
    registratonLink           String
    testTime                  DateTime
    is2hReminderSent          Boolean
    PlacementEvent2UserNotify PlacementEvent2UserNotify[]
}

model PlacementEvent2UserNotify {
    id             String         @id @default(cuid())
    userId         String
    eventId        String
    User           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    PlacementEvent PlacementEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
